#BlueJ class context
comment0.target=BinarySearchTree
comment0.text=\r\n\ This\ BinarySearchTree\ object\ defines\ a\ reference\ based\ binary\ search\ tree\r\n\ \r\n\ @author\ \ \r\n\ @version\ \r\n
comment1.params=
comment1.target=BinarySearchTree()
comment10.params=tree\ level
comment10.target=java.lang.String\ toString(BinaryNode,\ int)
comment11.params=
comment11.target=java.util.List\ preorderTraverse()
comment12.params=list\ tree
comment12.target=void\ recPreorderTraverse(java.util.List,\ BinaryNode)
comment13.params=
comment13.target=java.util.List\ inorderTraverse()
comment14.params=list\ tree
comment14.target=boolean\ recInorderTraverse(java.util.List,\ BinaryNode)
comment15.params=
comment15.target=java.util.List\ postorderTraverse()
comment16.params=list\ tree
comment16.target=void\ recPostorderTraverse(java.util.List,\ BinaryNode)
comment17.params=element
comment17.target=void\ remove(java.lang.Comparable)
comment18.params=element\ tree
comment18.target=BinaryNode\ recRemove(java.lang.Comparable,\ BinaryNode)
comment19.params=tree
comment19.target=BinaryNode\ removeNode(BinaryNode)
comment2.params=
comment2.target=boolean\ isEmpty()
comment20.params=tree
comment20.target=java.lang.Comparable\ getPredecessor(BinaryNode)
comment21.params=
comment21.target=void\ balance()
comment22.params=list
comment22.target=void\ insertTree(java.util.List)
comment3.params=
comment3.target=int\ size()
comment4.params=tree
comment4.target=int\ recSize(BinaryNode)
comment5.params=element
comment5.target=void\ add(java.lang.Comparable)
comment6.params=element\ tree
comment6.target=BinaryNode\ recAdd(java.lang.Comparable,\ BinaryNode)
comment7.params=element
comment7.target=boolean\ contains(java.lang.Comparable)
comment8.params=element\ tree
comment8.target=boolean\ recContains(java.lang.Comparable,\ BinaryNode)
comment9.params=
comment9.target=java.lang.String\ toString()
numComments=23
