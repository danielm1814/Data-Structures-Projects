#BlueJ class context
comment0.target=EvilHangman
comment1.params=fileName\ debug
comment1.target=EvilHangman(java.lang.String,\ boolean)
comment1.text=\r\n\ Construct\ an\ EvilHangman\ object\ and\ initiailize\ all\ instance\ variables.\r\n\ @param\ fineName\ the\ name\ of\ the\ file\ that\ contains\ the\ word\ list.\r\n\ @param\ debug\ indicates\ if\ the\ size\ of\ the\ remaining\ word\ list\r\n\ \ \ \ \ \ \ \ should\ be\ included\ in\ the\ toString\ result.\r\n\ @throws\ FileNotFoundException\ when\ the\ fileName\ file\ does\ not\ exist.\r\n
comment10.params=patterns\ letter
comment10.target=java.util.List\ getPartitions(java.util.List,\ java.lang.String)
comment10.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Partitions\ each\ list\ in\ words\ based\ on\ the\ list\ of\ patterns\r\n\ and\ letter.\r\n\ @param\ patterns\ the\ list\ of\ patterns\r\n\ @param\ letter\ the\ letter\ used\ to\ find\ the\ pattern\ for\r\n\ \ \ \ \ \ \ \ each\ word\ in\ words.\r\n\ @return\ the\ list\ of\ partitions.\ \ The\ ith\ partition\ corresponds\r\n\ \ \ \ \ \ \ \ \ to\ the\ ith\ pattern.\r\n
comment11.params=partitions
comment11.target=java.util.List\ getLargestRemaining(java.util.List)
comment11.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Determines\ the\ largest\ of\ the\ list\ of\ partitions.\r\n\ @param\ partitions\ the\ list\ of\ partitions.\r\n\ @return\ the\ largest\ partition.\r\n
comment12.params=found\ letter
comment12.target=void\ substitute(java.lang.String,\ java.lang.String)
comment12.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Creates\ a\ new\ string\ for\ solution.\ \ If\ the\ ith\ letter\ of\r\n\ found\ equals\ letter,\ then\ the\ ith\ letter\ of\ solution\ is\r\n\ changed\ to\ letter;\ Otherwise\ it\ is\ unchanged.\r\n\ @param\ found\ the\ string\ to\ check\ for\ occurances\ of\ letter.\r\n\ @param\ letter\ the\ letter\ to\ check\ for\ in\ found.\r\n
comment13.params=
comment13.target=java.lang.String\ getSolution()
comment2.params=debug
comment2.target=EvilHangman(boolean)
comment3.params=
comment3.target=void\ playGame()
comment3.text=\r\n\ Plays\ one\ the\ game.\ \ The\ user\ guesses\ letters\ until\ either\r\n\ they\ guess\ the\ word,\ or\ they\ run\ out\ of\ guesses.\r\n\ Game\ status\ is\ printed\ each\ turn\ and\ winning\ /\ losing\r\n\ information\ is\ printed\ at\ the\ conclusion\ of\ the\ game.\r\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment4.text=\r\n\ Creates\ and\ returns\ a\ status\ string\ that\ indicates\ the\r\n\ state\ of\ the\ game.\r\n\ @return\ the\ game\ status\ string.\r\n
comment5.params=
comment5.target=void\ inputWords()
comment5.text=\r\n\ Helper\ method\ for\ the\ constructor\:\r\n\ Inputs\ the\ word\ length\ from\ the\ user,\ reads\ in\ the\ words\ from\r\n\ the\ fileName\ file,\ and\ initializes\ the\ words\ instance\ variable\r\n\ with\ the\ words\ of\ the\ correct\ length.\ \ This\ method\ loops\ until\r\n\ a\ valid\ word\ length\ is\ entered.\r\n\ @param\ fineName\ the\ name\ of\ the\ file\ that\ contains\ the\ word\ list.\r\n\ @throws\ FileNotFoundException\ when\ the\ fileName\ file\ does\ not\ exist.\r\n
comment6.params=fileName
comment6.target=void\ inputWords(java.lang.String)
comment7.params=
comment7.target=java.lang.String\ inputLetter()
comment7.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Inputs\ a\ one-letter\ string\ from\ the\ user.\r\n\ Loops\ until\ the\ string\ is\ a\ one-character\ character\ in\ the\ range\r\n\ a-z\ or\ A-Z.\r\n\ @return\ the\ single-letter\ string\ converted\ to\ upper-case.\r\n
comment8.params=word\ letter
comment8.target=java.lang.String\ getPattern(java.lang.String,\ java.lang.String)
comment8.text=\r\n\ Helper\ method\ for\ getPatterns\:\r\n\ Uses\ word\ and\ letter\ to\ create\ a\ pattern.\ \ The\ pattern\ string\r\n\ has\ the\ same\ number\ of\ letter\ as\ word.\ \ If\ a\ character\ in\r\n\ word\ is\ the\ same\ as\ letter,\ the\ pattern\ is\ letter;\ Otherwise\r\n\ it's\ "-".\r\n\ @param\ word\ the\ word\ used\ to\ create\ the\ patte\ \ \ \ rn\r\n\ @param\ letter\ the\ letter\ used\ to\ create\ the\ pattern\r\n\ @return\ the\ pattern\r\n
comment9.params=letter
comment9.target=java.util.List\ getPatterns(java.lang.String)
comment9.text=\r\n\ Helper\ method\ for\ playGame\:\r\n\ Gets\ the\ patterns\ for\ all\ words\ in\ words\ using\ letter.\r\n\ @param\ letter\ the\ letter\ used\ to\ find\ the\ patterns.\r\n\ @return\ the\ list\ of\ patterns.\r\n
numComments=14
